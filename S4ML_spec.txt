quand on fait un open, faut que ca donne le focus sur le premier mathlineinput


18/10/2021
----------
prochaine étape du parsing: 

gerer les instructions
- commencer par les instructions simples genre les les opérations mettant en jeu des nombres

01/10/2021
----------

c'est ok pour le parsing

maintenant faut bosser sur le clavier virtuel pour l'utilisation mobile.

il faut que
Let
Given
dash
==> soient tout le temps accessibles

4 menus:
- (123) ==> chiffres et trucs de base
- (ABC) ==> lettres
- (Sym) ==> symboles genre alpha et tout
- (sig) ==> signes genre \in et tout
	- f()   ==> fonctions pré-définies genre sin, cos, tan, operateurs genre somme, intégrale, etc

(123)
[ABC] [_][^] [7][8][9][/][\][Back]
[Sym] [(][)] [4][5][6][*][*][Enter]
[Sig] [[][]] [1][3][2][-]   [U]
[f()] [L][#] [0][.][=][+][L][D][R]
----------------------------------
34

(ABC)
[q][w][e][r][t][y][u][i][o][p] [#]
[a][s][d][f][g][h][j][k][l][B] [let]
[Shif][z][x][c][v][b][n][m][E] [dash]
[123] [ ][ ][ ][ ][ ][[][]][|] [vc]
----------------------------------
34

[a][b][g][G][d][D][e][z][e][back][t]
[T][i][k][l][L][m][n][k][p][P]
[r][s][S][t][u][p][P][c][p][P]
[o][O][C][R][Q][Z][N][0][°][]

il faudrait des touches pour les symboles
========
+ alpha
+ beta
+ gamma
+ Gamma
+ delta
+ Delta
+ varepsilon
+ zeta
+ eta
+ theta
+ Theta
+ iota
+ kappa
+ lambda
+ Lambda
+ mu
+ nu
+ ksi
+ pi
+ Pi
+ rho
+ sigma
+ Sigma
+ tau
+ upsilon
+ phi
+ Phi
+ chi
+ psi
+ Psi
+ omega
+ Omega
+ R
+ C
+ Q
+ Z
+ N
+ emptyset
+ \\text{°}
+ \\text{rad}

========
[ 7][ 9][ 5][ 6][11][15][17][18][27][ <]
[ 8][10][ 1][ 2][12][21][23][25][28][19]
[      ][ 3][ 4][13][22][24][26][29][20]
[ 123  ][14][16][30][31][33][   o k    ]

1- lfloor
2- rfloor
3- lceil
4- rceil
5- [
6- ]
7- \\in
8- infinity
9- \\vec
10- overline
11- \\neg
12- land
13- lor
14- neq
15- exists
16- \\simeq
17- pipe (\\ |\\)
18 \\circ
19- \\partial
20- \\differential
21- \\union
22- \\cap
23- supset
24- supseteq
25- subset
26- subseteq
27- \\rightarrow
28- \\leftarrow
29- \\mapsto
30- \\forall
31- \\equiv
32- \\star
33- nexist
========
+ >
+ <
+ >=
+ <=
+ int
+ oint
+ nabla
+ d/dx
+ d/dx



========

+ delete line
+ add mathlineOver
+ duplicate line
+ Function
+ Given
+ dash
+ save
+ open
+ print
+ undo
+ redo
=========
+ sum
+ prod
+ differentiation totale
+ differentiation partielle
+ X
=========




28/09/2021
----------
bon c'est galere intergalactique

il faudrait faire en sorte que quand on fait
a-b	==> a<operator[-]>b
-a	==> <operator[Opposite]>a
(a+b)	==> (a<operator[+]>b)
-(a+b)	==> <operator[Opposite]>(a<operator[+]>b)


si ya un moins -,
ca vaut opposite que si c'est le debut de l'expression (parenthese par exemple)



notes pour plus tard:

faire qu'une instanciation d'ensemble puisse l'être par produit cartésien d'ensembles
--> A X B
--> A^n

==> de maniere generale, faire qu'une instanciation en regle generale soit le resultat d'une instruction et parser le resultat de l'instruction pour voir si c'est un type ensemble, etc, ca sera peut-être plus simple que de parser des syntaxes

ensuite il faudra faire en sorte qu'on puisse apeller des fonctions dans les expressions, genre cos(), sin(), elof(), etc

pour l'histoire de checker si les variables sont definies dans une expression:
on pourrait faire une ExpressionToProcess et du coup, l'Expression normale, renverrait un objet avec l'expression en format string, et l'ensemble des variables contenues dedans, afin que le ExpressionToProcess puisse parser les variables
et checker si elles sont definies ou si elles ont le nom de la variable muette definie dans la structure








22/09/2021
----------

a priori le parser est okay pour les declarations et les instructions
maintenant le truc c'est qu'il y a:
- le point qui permet d'acceder à des méthodes des objets mathématiques deja declarés, genre f.isEven(), n.isPrime(), n.factorize(), etc
==> le point servant aussi à definir des flottants, il faudra qu'il puisse faire la difference entre 42.isEven() et 42.3456

==> le fait qu'il faille que 2 objets mathématiques contigus, s'il n'y a pas d'opérateur entre eux, genre ab ou k 1/3, que ca considère qu'ils sont séparés par une opération produit
==> la solution a mon avis, c'est que:
    - un nombre immédiatement suivi d'un varAtLargeIdentifier, correspond au nombre * variable
    - un nombre suivi immédiatement par un facteur correspond au produit des 2
    - une varAtLargeIdentifier suivie directement par un autre varAtLargeIdentifier correspond au produit des 2
    - une varAtLargeIdentifier, immédiatement suivi par un facteur sans parenthese, c'est le produit des 2
    - une varAtLargeIdentifier, immédiatement suivie par un facteur entre (),
      -> si c'est une fonction, on process,
      -> sinon on multiplie


La dans l'immédiat il faut travailler sur le parser des varIdentifier pour que l'expression sortante soit plus clair dans le nom des variables

dans un instruction, quand on fait +quelque chose ==> c'est juste ce quelque chose
quand on fait - ce quelque chose (genre -a), ca renvoit -1*a
==> en fin de compte, quand on fait -objetMathematique, ca ne fait que faire objetMathematique.opposite() et ca fait ce que ca doit faire. C'est une methode de l'objet tout simplement


21/09/2021
----------

C'est la galere le parser, on reprend tout depuis le debut.

une instruction c'est:
- soit un instanciation / fonction
  - de fonction
  - d'ensemble
  - d'équation
  - reunion d'ensembles, etc
  - etc
  ==> Qui retourne un objet mathématique (nombre, fonction, ensemble, etc)
  ==> d'ou l'importance de bien les parser pour transformer la syntaxe intuitive (intégrale, sommme, etc) en expression utilisable par un programme
  ==> c'est un facteur en fait, c'est a dire une unité dans une expression

- soit un calcul, c'est a dire un ensemble de facteurs et des opérateurs entre ces facteurs (+, -, *, div, modulo, n'importe quel symbole entré dans le parseur comme etant des opérateurs

- une expression, c'est:
un facteur<a definir>,
- suivi éventuellement par un opérateur puis d'un autre facteur<a definir>

- facteur c'est soit:
  - une puissance = <expression>^{expression}
  - une fraction = \\frac{expression>}{expression}
  - un element unitaire

- un opérateur c'est:
  - '+'
  - '-'
  - '*'
  ==> on peut pas avoir le "/" parce qu'on utilise des fractions et donc la notation \\frac{num}{denom}
  ==> pareil pour la puissance, c'est pas '**' c'est ^{expression}


- un element unitaire, c'est soit:
  - un nombre
  - une variable au sens large

todo:
----

- faire le responsive pour la version mobile ==> voir si ya moyen de le faire en hard, sinon si trop compliqué, a faire avec un framework genre react ==> mais possiblement react utilise import et compagnie donc ca oblige a passer par un serveur ==> cassage de l'intérêt du truc

- faire un clavier visuel pour la version mobile

20/09/2021:
----------

ca bosse sur le parser:
en gros la declaration de variable c'est ok
là il faut travailler sur ce que sont les instructions

une instruction c'est:
soit une variable ==> c'est la valeur de la variable
soit une fonction instanciée
soit un nombre instancié
soit un calcul

la la classe Number a ete definie mais en fait c'est des entiers
-> definir une classe Integer et une classeFloatNumber pour expliciter la classe Number


13/09/2021:
----------
Bon ya des galere, il va falloir pas mal de cerveau:
en gros l'idée est la suivante: quand on est dans S4M, et qu'on déclare des variables, le comportement doit être le suivant:
on tape dans une MathLineInput une declaration let x = 42

==> dès que ca perd le focus, ca process le contenu de ce qui a été tapé et si ya une erreur ca throw
    (et on pourra gérer l'exception en mettant un background rouge dans le MathLineInput et le message
    d'erreur dans l'écran d'output)

==> si ya pas d'erreur, ca va stocker le nom de la variable déclarée et son affectation dans S4MCoreMemory ==> tout est cool

==> si dans un autre MathLineInput je déclare à nouveau x ==> ca throw car x est déjà contenu dans le S4MCoreMemory parce qu'il
    a déjà été déclaré préalablement

==> si je reviens sur le premier MathLineInput où j'ai déclaré x, et que je change sa valeur ==> ca doit modifier la valeur dans
    S4MCoreMemory

==> Si je supprime la mathLineInput qui contenait une definition de variable qui a été processée ==> ca delete l'entrée dans S4MCoreMemory

==> si je change le nom de la variable déclarée dans le MathLineInput ou j'ai defini x préalablement, ca doit delete l'entrée de x dans S4MCoreMemory
    et créer une nouvelle entrée
    ==> il faudra donc que chaque entrée de variable corresponde à une MathLineInput donnée ==> c'est l'élément discriminant (!)





infos pour le parsing:
---------------------
en gros une ligne de S4ML c'est:
- soit une déclaration d'une variable (genre let x = 42) ==> [DEFINE Declaration]
- soit une déclaration d'une contrainte sur une variable préalablement déclarée (genre given contrainte sur x) ==> [DEFINE Constraint]
- soit une instruction = process un calcul, afficher un objet mathematique a l'ecran, etc ==> [DEFINE Instruction]


Constraint:
----------
c'est la chaine _ "\\text{Given}\\"
suivi d'un espace obligatoire __
suivi d'un statement ==> [DEFINE Statement]
suivi d'un _



Declaration: [VarIdentifier] [Set] [MathObj]
-----------
c'est la chaine _ "\text{Let}\"
suivie d'un espace obligatoire ==> [DEFINE   __ = Mandatory_Whitespace]OK
suivie d'un espace optionnel _==> [DEFINE Whitespaces]OK
suivie d'un identifiant de variable ==> [DEFINE UndefinedVarIdentifier]OK
suivie d'un opérateur d'affectation (c'est a dire "=" ou "\\in") ==> [Define AffectationOperator]OK
amk

suivi d'un objet mathématique: ==> DEFINE [MathObj]
et du coup, ce qu'il y a a droite de l'opérateur d'affectation,
- soit c'est une variable ==> il faut que ca soit donc une DefinedVarIdentifier
- soit c'est un objet mathématique créé à la volée, c'est à dire une instruction qui retourne un objet mathématique (genre f.isEven() ou Function(t vers 2t, R dans R))

SI l'opérateur est un \in, alors il faudra que le MathObj soit un Set




SI l'affectation c'est un "=", alors:

alors le truc qu'on affecte, ca doit être un objet mathématique et c'est donc le contenu:
- soit une variable ==> du coup c'est un ExistingVarIdentifier ==> [DEFINE ExistingVarIdentifier]
  ==> puis ca check si

si c'est un \in, un objet mathématique d'ensemble (soit une variable préalablement définie qui est un ensemble, soit un ensemble déjà set genre R ou [0, 30[R, etc) ==> [DEFINE Set]

OU si c'est un =, suivie du truc affecté = objet mathématique (entier, autre variable, ensemble, fonction, etc ==> methodes constructeurs a definir) ==> [DEFINE MathObj]


MeasureUnit:
----------
= "\\text{" [A-Za-z0-9]+ "}"
==> pour definir des variables préalablement définies pour mesure des trucs genre des températures, distances, etc

UndefinedVarIdentifier:
----------------------
= VarIdentifier { checker s'il existe dans la memoire, si oui, throw, sinon on le return ==> permet d'être sûr qu'on ne re-définie pas une variable pré-existante}


DefinedVarIdentifier:
---------------------
= VarIdentifier { checker dans la memoire si ya une variable de ce nom là qui existe, si non, throw, si oui, le return directement ==> ca permet de throw si la variable existe pas}

+AffectationOperator
-------------------
= EqualOperator / InOperator ==> [DEFINE EqualOperator]OK et [DEFINE InOperator]OK

+EqualOperator
-------------
= "="

+InOperator
----------
"\\in"


+Mandatory_Whitespace: __
--------------------
= "\\ "

+Whitespaces: _
-----------
"\\ "*

+Identidiant de variable: VarIdentifier
-----------------------
c'est 1 symbole, forcément (sinon ca va foutre le bordel quand faudra gerer les produits avec les lettres qui se suivent)

donc un symbole, c'est à dire un caractère autorisé [a-zA-Z] ==> [DEFINE Letter]OK
OU
un signe, c'est à dire un truc genre \\varepsilon, \\lambda, etc = "\\" [a-zA-Z]+ ==> [DEFINE SpecialLetter]OK

suivi éventuellement par un type Indice ==> [DEFINE IdentifierIndice]OK

Indice de variable: IdentifierIndice
------------------
C'est un "_"
suivi par un Char ==> [DEFINE Char]OK
OU un specialChar ==> [DEFINE SpecialLetter]OK
OU d'un texte ==> [DEFINE Text]OK

puis EVENTUELLEMENT suivi par un autre indice IdentifierIndice?

+Letter:
------
= [A-Za-z]

+Text:
-----
= "\\text{" [A-Za-z0-9] "}"


+char:
-----
= [A-Za-z0-9]

+SpecialLetter:
-------------
= "\\" [A-Za-z]+ ==> return join()

contrainte Constraint:
---------------------

Instruction:
-----------


specifications du S4ML:
-----------------------

// let b1 = new S4ML_Bool(BoolValue.TRUE);
// let b2 = new S4ML_Bool(BoolValue.FALSE);
// let b3 = new S4ML_Bool(BoolValue.UNDETERMINED);

// console.log(b1.value);
// console.log(b2.value);
// console.log(b3.value);
. chaque contenu de ligne correspond à une commande
. une commande qui commence par Given est une definition de Statement, genre
  Given Statement
  ou
  Given x = 42

. Un statement correspond:
  - soit a une déclaration de variable, genre (Given x in R) ou (Given x = 42) ou (Given f = Function(x, R->R)) ou (Given eq_1 = Equation(x + 3 = 42))
  - soit à une declaration de contrainte sur une ou plusieurs variable préalablement déclarées, genre (x > 42) ou (x in R+) ou (f.isEven() = true) ou (x + 3 = 42)


. il y a des constantes prefefinies, genre True ou False qui sont des Bool(True) et Bool(False)

----
. les objects Bool sont des objets qui comprennent un attribut value qui peut valoir True, False ou Undetermined 
. Pour instanier un objet Bool, on fait Bool() ==> retourne un Bool de value Undetermined,
  ou Bool(AutreBool) qui retourne un Booleen qui a la meme valeur que le bool passé en parametre
----

----
. les objects fonction comprennent:
  - un ensemble de depart
  - un ensemble d'arrivée
  - le nom des variables d'entrée
  - l'expression de la sortie
----

----
. les objets equation, contiennent
  - la ou les variables a trouver en array
  - la ou les expressions sur lesquelles se baser en array
  - une methode solve qui retourne
----

\int _{\Omega }^{ }\left(f\right)d_{\mu }

remarque sur la mesure:
une mesure deja c'est une mesure sur un ensemble E.
et en gros une mesure sur l'ensemble E, c'est le fait d'associer un nombre reel (ou + infini) à une partie de cet ensemble E

genre la temperature, c'est t'as l'ensemble des etats de températures possibles, et on va pouvoir associer un nombre reel a chaque partie des températures possibles

du coup un mesure, c'est une fonction m definie sur P(E) à valeurs dans R+
m: P(E) -> R+ U {+ infini}

et cette fonction a 2 propriétés / contraintes
pour A et B sous-ensembles de E disjoints,
m(A U B) = M(A) + M(B)
et
M(0) = 0

du coup pour le fait que m(A U B) = M(A) + M(B)
c'est un peu comme si on avait un magma
(P(E), U)
et un autre magma
(R, +)
et du coup, m est un morphisme de magma de (P(E), U) dans (R, +)
dans le cas où les 2 elements de P(E) sont disjoints

pour faire une application qui mesure le nombre d'elements dans un ensemble E, on a l'application
m: P(E) -> N, x -> card(x)

constantes:
----------
\\text{m} = mètre
\\text{°} = degré (angle)
\\text{rad} = radian
\\text{kg} = kilogramme
\\text{s} = seconde
\\text{A} = Ampère
\\text{V} = Volt
\\text{C} = Coulomb
\\text{mol} = mole
\\text{K} = Kelvin
\\text{cd} = Candela
\\text{lm} = Lumen (flux lumineux)
\\text{lx} = Lux (eclairement lumineux)
\\text{Pa} = Pascal
\\text{J} = Joule
\\text{N} = Newton
\\text{Hz} = Hertz
\\text{W} = Watt
\\text{S} = Siemens (conductance)
"\\Omega" = Ohm
\\text{F} = Farad (capacité)
\\text{H} = Henry (Inductance)
\\text{T} = Tesla (induction magnétique)
\\text{Wb} = Weber (flux d'induction magnetique)
\\text{S} = Siemens (conductance)
\\text{Bq} = Becquerel (activité radioactive)
\\text{Gy} = Gray (dose absorbée)
\\text{Sv} = Sievert (equivalent dose)

\\text{e} = Constante d'Euler
\\text{i} = Nombre imaginaire

\\text{Na} = nombre d'avogadro
\\text{k} = constante de Boltzman

\\mathbb{N} = ensemble N
\\mathbb{Z} = ensemble Z
\\mathbb{Q} = ensemble Q
\\mathbb{R} = ensemble R
\\mathbb{C} = ensemble C


\\text{d} = opérateur différentiel
\\text{d}_{x} = opérateur différentiel par rapport à la variable x





TODO:
----

- faire une fonction S4ML qui prend en argument un expression, un ensemble de variables, et qui retourne l'expression exprimée en fonction de ces variables.
==> par exemple, j'ai Q = 4*pi*l*p/r, et l = 2*g et p = 46*g^2
==> si on veut f(Q, {r}) ==> ca retourne Q = 368*pi*g^3/r

- implementer operateurs Complementaire = E - A, difference symetrique = A - AinterB,

- dans la definition des Sets, pouvoir faire des opérations genre ^* = privé de 0, _- = que les valeurs négatives, etc


